# NOTE 여기 까기
# 먼저 checkpoint를 불러올 때, stable diffusion t2i를 불러오고 controlNet을 2개로 하는 전략을 취해야 겠다.
model:
  base_learning_rate: 1.0e-05
  target: ldm.models.diffusion.controlnet.MultiControlNet  # NOTE 여기 수정 필요
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: "image_target"  # 이거 loss로 쓰기 위해서 target view 임
    # cond_stage_key: "image_cond"  # diffusion probability distribution을 만들 때 conditioning을 하기 위한 부분 p(x|c)
    cond_stage_key: "txt"
    # TODO 여기, 현재는 image embedding을 clip으로 transform하고 있는데 여기 수정 필요
    # TODO data loader랑 controlNet 가져오는 코드보고 2개의 controlNet으로 control하는 방법 참조
    # control_key: "canny"  # 여기는 다른 input으로 control 할 때, depth까지 써보기
    control_key: 
    - pose
    - canny
    image_size: 32  # 여기 다름 절반임...
    channels: 4
    cond_stage_trainable: false
    conditioning_key: hybrid
    # monitor: val/loss_simple_ema
    scale_factor: 0.18215
    use_ema: False
    only_mid_control: False

    # control_stage_config:
    #   # NOTE: 이거 cotnrolnet 까기
    #   # TODO: 여기를 throughly 하게 개조할 피룡가 있다.
    #   target: ldm.modules.diffusionmodules.controlnetmodel.ControlNet
    #   params:
    #     image_size: 32 # unused
    #     in_channels: 4
    #     hint_channels: 3
    #     model_channels: 320
    #     attention_resolutions: [ 4, 2, 1 ]
    #     num_res_blocks: 2
    #     channel_mult: [ 1, 2, 4, 4 ]
    #     num_heads: 8
    #     use_spatial_transformer: True
    #     transformer_depth: 1
    #     context_dim: 768
    #     use_checkpoint: True
    #     legacy: False
    control_stage_config:
    # for canny edge embedding
    - target: ldm.modules.diffusionmodules.controlnetmodel.ControlNet
      params:
        image_size: 32 # unused
        in_channels: 4
        hint_channels: 3
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False
        spatial_control: False  # only conditioning by pose
    # for pose embedding
    - target: ldm.modules.diffusionmodules.controlnetmodel.ControlNet
      params:
        image_size: 32 # unused
        in_channels: 4
        hint_channels: 3
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False
      
      
       
    unet_config:
      # NOTE: 이거 unet 까기
      # TODO: 여기는 T2I 1.4 version 그대로 가져오기
      target: ldm.modules.diffusionmodules.controlnetmodel.ControlledUnetModel
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      # NOTE: 이거 VAE 까기
      # DONE freeze
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      # target: ldm.modules.encoders.modules.FrozenCLIPImageEmbedder
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder
      # TODO 아무래도 여기만 수정하면 될 것 같기는 한다.
      # DONE random weight만 아니면 된다.

# TODO 여기 까기
data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 64
    num_workers: 8
    train:
      target: ldm.data.control.ObjaverseData
      params:
        root_dir: "/workspace/data/3ddst/train"
        txt_path: "/workspace/code/3DAnything/zero123/configs/train.txt"
        caption_path: "/workspace/code/3DAnything/debug/data/captions.csv"
        patch_size: 256

    validation:
      target: ldm.data.control.ObjaverseData
      params:
        root_dir: "/workspace/data/3ddst/train"
        txt_path: "/workspace/code/3DAnything/zero123/configs/val.txt"
        caption_path: "/workspace/code/3DAnything/debug/data/captions.csv"
        patch_size: 256

lightning:
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 500
        max_images: 8
        increase_log_steps: False
        log_first_step: True
        log_images_kwargs:
          use_ema_scope: False
          inpaint: False
          plot_progressive_rows: False
          plot_diffusion_rows: False
          N: 16
          unconditional_guidance_scale: 7.5
          unconditional_guidance_label: [""]

  modelcheckpoint:
    target: pytorch_lightning.callbacks.ModelCheckpoint
    params:
      every_n_train_steps: 1000

  trainer:
    benchmark: True
    max_steps: 50000
    check_val_every_n_epoch: 10
    num_sanity_val_steps: 0
  
pre_control:
  path:
    sd: /workspace/weight/diffuse/stable-diffusion-v-1-4-original/sd-v1-4.ckpt
    pose: /workspace/weight/diffuse/zero123-weights/165000.ckpt
    canny: "/workspace/weight/diffuse/ControlNet/models/control_sd15_canny.pth"